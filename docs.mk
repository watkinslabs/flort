# Flort Documentation and Development Makefile

.PHONY: help docs docs-serve docs-build docs-deploy clean install test lint format check-all

# Default target
help:
	@echo "🚀 Flort Development & Documentation Commands"
	@echo ""
	@echo "📖 Documentation:"
	@echo "  docs         - Serve documentation locally"
	@echo "  docs-build   - Build documentation"
	@echo "  docs-deploy  - Deploy documentation to GitHub Pages"
	@echo "  docs-clean   - Clean documentation build"
	@echo ""
	@echo "🔧 Development:"
	@echo "  install      - Install development dependencies"
	@echo "  install-docs - Install documentation dependencies"
	@echo "  test         - Run test suite"
	@echo "  lint         - Run linting checks"
	@echo "  format       - Format code with black"
	@echo "  check-all    - Run all checks (lint, test, build)"
	@echo ""
	@echo "🧹 Cleanup:"
	@echo "  clean        - Clean all build artifacts"

# Documentation targets
docs: install-docs
	@echo "🚀 Starting documentation server..."
	@echo "📖 Open http://127.0.0.1:8000 in your browser"
	mkdocs serve

docs-build: install-docs
	@echo "🔨 Building documentation..."
	mkdocs build --clean --strict

docs-deploy: install-docs
	@echo "🚀 Deploying documentation to GitHub Pages..."
	mkdocs gh-deploy --clean --force

docs-clean:
	@echo "🧹 Cleaning documentation build..."
	rm -rf site/

# Development targets
install:
	@echo "📦 Installing development dependencies..."
	pip install -e .
	pip install -e .[dev]

install-docs:
	@echo "📦 Installing documentation dependencies..."
	pip install -r docs/requirements.txt

test:
	@echo "🧪 Running test suite..."
	python -m pytest tests/ -v --cov=flort --cov-report=html --cov-report=term

lint:
	@echo "🔍 Running linting checks..."
	flake8 flort/ tests/
	mypy flort/ --ignore-missing-imports
	@echo "✅ Linting complete"

format:
	@echo "🎨 Formatting code..."
	black flort/ tests/
	isort flort/ tests/
	@echo "✅ Formatting complete"

check-all: lint test docs-build
	@echo "✅ All checks passed!"

# Cleanup targets
clean: docs-clean
	@echo "🧹 Cleaning build artifacts..."
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	@echo "✅ Cleanup complete"

# GitHub Pages setup (run once)
setup-pages:
	@echo "🔧 Setting up GitHub Pages..."
	git checkout -b gh-pages || git checkout gh-pages
	git rm -rf .
	touch .nojekyll
	echo "# GitHub Pages Branch" > README.md
	echo "This branch is automatically generated by mkdocs gh-deploy" >> README.md
	git add .
	git commit -m "Initialize GitHub Pages branch" || true
	git checkout main
	@echo "✅ GitHub Pages branch setup complete"

# Local development with live reload
dev: install install-docs
	@echo "🔧 Starting development environment..."
	@echo "📖 Documentation: http://127.0.0.1:8000"
	@echo "🔄 Auto-reload enabled for code and docs changes"
	mkdocs serve --dev-addr=127.0.0.1:8000 --livereload

# Generate API documentation
api-docs:
	@echo "📋 Generating API documentation..."
	python -c "import os; from pathlib import Path; \
api_dir = Path('docs/api'); api_dir.mkdir(exist_ok=True); \
modules = { \
    'overview': 'API Overview and Quick Reference', \
    'core': 'Core Functions (get_paths, concat_files)', \
    'files': 'File Operations and Utilities', \
    'utils': 'Utility Functions' \
}; \
for module, desc in modules.items(): \
    with open(api_dir / f'{module}.md', 'w') as f: \
        f.write(f'# {desc}\n\n'); \
        if module == 'overview': \
            f.write('This section provides API reference for using Flort programmatically.\n\n'); \
        else: \
            f.write(f'::: flort.{module}\n')"
	@echo "✅ API documentation generated"

# Build release
build: clean check-all
	@echo "📦 Building release..."
	python setup.py sdist bdist_wheel
	@echo "✅ Release built in dist/"

# Quick test with current code
quick-test:
	@echo "⚡ Quick test of current Flort installation..."
	python -c "import flort; print(f'Flort version: {flort.__version__}')"
	flort --version
	flort . --extensions py --manifest --max-depth 1 --output /tmp/flort_test.txt
	@echo "✅ Quick test complete"

# Documentation preview with custom port
docs-preview:
	@echo "👀 Starting documentation preview server..."
	mkdocs serve --dev-addr=0.0.0.0:8080

# Check documentation links
docs-check:
	@echo "🔗 Checking documentation links..."
	mkdocs build --strict
	# Add link checker here if needed
	@echo "✅ Documentation check complete"
